leetcode_53:最大子序和

思路：动态规划（一维）

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int len = nums.size();
        if (len == 0) return 0;
        if (len == 1) return nums[0];

        //dp[i]的含义：以nums[i]元素结尾的连续子数组的最大和
        //例如：nums={-2,1,3,4},dp[2]表示以3结尾的连续子数组的最大和，即dp[2]=4
        vector<int> dp(len, 0);

        //初始化
        dp[0] = nums[0];
        //状态方程为
        //if nums[i]+dp[i-1]>nums[i],dp[i]=nums[i]+dp[i-1]
        //else dp[i]=nums[i]

        //保存并更新运行过程中最大的值
        //注意ans的初始值
        int ans = nums[0];
        for (int i = 1; i < len; i++) {
            if (nums[i] + dp[i - 1] > nums[i]) dp[i] = nums[i] + dp[i - 1];
            else dp[i] = nums[i];
            ans = max(dp[i], ans);
        }
        return ans;
    }
};
