class Solution {
public:
   

    vector<vector<string>> solveNQueens(int n) 
    {
       vector<bool> col(n,false);
       vector<bool> dg(3*n,false);
       vector<bool> udg(3*n,false);
         vector<vector<string>> ans;
        string s="";
       for(int i=0;i<n;i++)
       {
            s+='.';
        }
        vector<string> tmp(n,s);
        dfs(0,n,tmp,col,dg,udg,ans);
        return ans;

    }
    void dfs(int u,int n,vector<string>& tmp,vector<bool>& col,vector<bool>& dg,vector<bool>& udg,vector<vector<string>>& ans)
    {
        if(u==n) {ans.push_back(tmp);return;}
        for(int i=0;i<n;i++)
        {
            if(!col[i]&&!dg[u+i]&&!udg[n-u+i])
            {
                tmp[u][i]='Q';
                col[i]=dg[u+i]=udg[n-u+i]=true;
                dfs(u+1,n,tmp,col,dg,udg,ans);
                tmp[u][i]='.';
                col[i]=dg[u+i]=udg[n-u+i]=false;
            }

        }
    }
    
};
